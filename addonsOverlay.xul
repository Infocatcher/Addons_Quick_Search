<?xml version="1.0"?>
<?xml-stylesheet href="data:text/css, :root { -moz-user-focus: normal; }" type="text/css"?>
<overlay xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<script type="application/javascript">
	<![CDATA[
	window.addEventListener("DOMContentLoaded", function init(e) {
		window.removeEventListener(e.type, init, false);

		const prefNS = "extensions.addonsQuickSearch.";
		const selectedAttr = "addonsQuickSearch_lastSelected";
		var saveSelected = Services.prefs.getIntPref(prefNS + "saveSelected");
		var input = "";
		var _lastKeyTime = 0;

		var root = document.documentElement;
		var categories = document.getElementById("categories");
		var viewport = document.getElementById("view-port");

		var saveSelectedItemsTimer = 0;
		var currentList, currentCategory;
		var watchListChange = false;

		var selectedItems = {};
		try {
			selectedItems = JSON.parse(root.getAttribute(selectedAttr) || "{}");
		}
		catch(e) {
			Components.utils.reportError(e);
		}

		window.addEventListener("keypress", keypressHandler, true);
		var topWindow = getTopWindow(top);
		if(topWindow) { // We use topmost window to handle events from "Get Add-ons" frame
			if(topWindow == top)
				topWindow = null;
			else
				topWindow.addEventListener("keypress", keypressHandlerGlobal, true);
		}
		if(saveSelected) {
			window.addEventListener("select", currentListChanged, true);
			window.addEventListener("popstate", currentListChanged, true);
		}
		window.addEventListener("unload", function destroy(e) {
			window.removeEventListener(e.type, destroy, false);
			window.removeEventListener("keypress", keypressHandler, true);
			if(topWindow)
				topWindow.removeEventListener("keypress", keypressHandlerGlobal, true);
			if(saveSelected) {
				window.removeEventListener("select", currentListChanged, true);
				window.removeEventListener("popstate", currentListChanged, true);
				saveSelectedItem();
				saveSelectedItems(true);
			}
		}, false);

		if(saveSelected) {
			setTimeout(function() {
				currentList = getCurrentList();
				currentCategory = getCurrentCategory();
				restoreSelectedItem(currentList, currentCategory);
				watchListChange = saveSelected > 1;
			}, 0);
		}
		else {
			root.removeAttribute(selectedAttr);
			document.persist(root.id, selectedAttr);
		}

		function keypressHandler(e) {
			if(handleHotkeys(e)) // Global hotkeys handler doesn't work with Electrolysis
				return;

			var fe = document.commandDispatcher.focusedElement;
			if(isEditableNode(fe))
				return;

			if(e.ctrlKey || e.altKey || e.metaKey || !e.charCode || hasOpenedPopup())
				return;

			var chr = String.fromCharCode(e.charCode).toLowerCase();
			// Based on _keyNavigate method from chrome://global/content/bindings/tree.xml#tree
			if(e.timeStamp - _lastKeyTime > 1000)
				input = chr;
			else
				input += chr;
			_lastKeyTime = e.timeStamp;
			// If all letters in the incremental string are the same, just
			// try to match the first one
			var search = /^(.)\1+$/.test(input) ? chr : input;
			findItem(search, e);
		}
		function keypressHandlerGlobal(e) {
			var fw = document.commandDispatcher.focusedWindow;
			if(fw && fw.top == top)
				handleHotkeys(e);
		}
		function handleHotkeys(e) {
			if(
				(e.ctrlKey || e.metaKey)
				&& !e.shiftKey && !e.altKey
				&& (e.keyCode == e.DOM_VK_UP || e.keyCode == e.DOM_VK_DOWN)
			) {
				stopEvent(e);
				selectCategory(e.keyCode == e.DOM_VK_DOWN);
				return true;
			}
			return false;
		}
		function isEditableNode(node) {
			var cs = node.ownerDocument.defaultView.getComputedStyle(node, null);
			return (cs.userModify || cs.MozUserModify) == "read-write";
		}
		function getTopWindow(window) {
			var dwu = Components.classes["@mozilla.org/inspector/dom-utils;1"]
				.getService(Components.interfaces.inIDOMUtils);
			for(;;) {
				var browser = dwu.getParentForNode(window.document, true);
				if(!browser)
					break;
				window = browser.ownerDocument.defaultView.top;
			}
			return window;
		}
		function findItem(search, e) {
			var list = getCurrentList();
			if(!list)
				return;
			e && stopEvent(e);

			var searchLength = search.length;
			var items = list.children;
			var start = 0;
			if(searchLength == 1)
				start = list.selectedIndex + 1;

			for(var i = 0, itemsCount = items.length; i < itemsCount; ++i) {
				var item = items[(i + start) % itemsCount];
				if(!isNodeVisible(item))
					continue;
				var name = item.getAttribute("name") || "";
				if(name.trimLeft().substr(0, searchLength).toLowerCase() == search) {
					selectItem(list, item)
					break;
				}
			}
		}
		function isNodeVisible(node) {
			var bo = node.boxObject;
			return bo.width > 0 && bo.height > 0;
		}
		function currentListChanged() {
			if(!watchListChange)
				return;
			setTimeout(function() {
				var prevCategory = currentCategory;
				currentCategory = getCurrentCategory();
				var prevList = currentList;
				currentList = getCurrentList();
				// getCurrentList() is null for #detail-view
				if(currentCategory == prevCategory && prevList && currentList)
					return;
				//_log(
				//	"Category changed: " + prevCategory + " => " + currentCategory
				//	+ (!prevList || !currentList ? "\n#detail-view ?" : "")
				//);
				if(prevList && prevCategory)
					saveSelectedItem(prevList, prevCategory);
				else
					checkForDetailsView(currentCategory);
				restoreSelectedItem(currentList, currentCategory);
			}, 0);
		}
		function checkForDetailsView(cat) {
			var addonId;
			if(
				window.gViewController
				&& /^addons:\/\/detail\/([^\s\/?&#]+)/.test(gViewController.currentViewId)
			) try {
				addonId = decodeURIComponent(RegExp.$1);
			}
			catch(e) {
			}
			if(!addonId)
				return;
			if(!cat)
				cat = getCurrentCategory();
			if(!cat)
				return;
			selectedItems[cat] = addonId;
			//_log("checkForDetailsView: " + addonId + " [" + cat + "]");
			scheduleSave();
		}
		function saveSelectedItem(list, cat) {
			if(!list)
				list = getCurrentList();
			if(!cat)
				cat = getCurrentCategory();
			if(!list || !cat)
				return;
			var si = list.selectedItem;
			if(!si && !list.hasChildNodes())
				return;
			selectedItems[cat] = si && si.getAttribute("value") || "";
			//_log("saveSelectedItem: " + (si && si.getAttribute("value")) + " [" + cat + "]");
			scheduleSave();
		}
		function scheduleSave() {
			clearTimeout(saveSelectedItemsTimer);
			saveSelectedItemsTimer = setTimeout(saveSelectedItems, 1000);
		}
		function saveSelectedItems(cleanup) {
			if(cleanup === true) { // Old setTimeout implementation pass "actual lateness" argument
				var validCategories = { __proto__: null };
				var list = categories;
				var items = list.children;
				for(var i = 0, l = items.length; i < l; ++i) {
					var item = items[i];
					var itemId = getCategoryId(item);
					validCategories[itemId] = true;
				}
				for(var cat in selectedItems) if(selectedItems.hasOwnProperty(cat))
					if(!(cat in validCategories))
						delete selectedItems[cat];
			}
			root.setAttribute(selectedAttr, JSON.stringify(selectedItems));
			document.persist(root.id, selectedAttr);
		}
		function restoreSelectedItem(list, cat, _stopTime, _delay) {
			if(!list || !cat)
				return;
			var lastSelected = selectedItems[cat] || null;
			if(!lastSelected)
				return;
			var items = list.getElementsByAttribute("value", lastSelected);
			if(items.length) {
				selectItem(list, items[0]);
				//_log("restoreSelectedItem: " + lastSelected + " [" + cat + "]");
				return;
			}
			// Wait for async loading...
			if(!_stopTime) {
				_stopTime = Date.now() + 2500; // Prevent recursion
				_delay = 0;
			}
			else {
				if(Date.now() > _stopTime)
					return;
				if(_delay < 60)
					_delay = Math.floor((1 + _delay)*1.2);
			}
			setTimeout(function() {
				restoreSelectedItem(list, cat, _stopTime, _delay);
			}, _delay);
		}
		function selectItem(list, item) {
			list.selectedItem = item;
			list.focus();
			item.focus();

			var pos = Services.prefs.getIntPref(prefNS + "scrollPosition")/100;
			var listRect = list.getBoundingClientRect();
			var itemRect = item.getBoundingClientRect();
			var dy = (itemRect.top - listRect.top) - pos*(listRect.height - itemRect.height);
			list.scrollBoxObject.scrollBy(0, dy);
			list.ensureElementIsVisible(item); // Should be visible, but...
		}
		function stopEvent(e) {
			e.preventDefault();
			e.stopPropagation();
		}
		function getCurrentList() {
			var panel = viewport.selectedPanel;
			if(!panel)
				return null;
			var id = panel.id;
			if(id == "discover-view" || id == "detail-view")
				return null;
			return panel.getElementsByTagName("richlistbox")[0];
		}
		function getCurrentCategory() {
			var si = categories.selectedItem;
			return si && getCategoryId(si);
		}
		function getCategoryId(item) {
			return item.getAttribute("value")
				|| item.id
				|| item.getAttribute("name")
				|| "unknown category #" + item.control.getIndexOfItem(item);
		}
		function selectCategory(next) {
			var list = categories;
			var items = list.children;
			var itemsCount = items.length
			var start = next
				? list.selectedIndex + 1
				: itemsCount - list.selectedIndex;
			if(!next)
				items.reverse();
			for(var i = 0; i < itemsCount; ++i) {
				var item = items[(i + start) % itemsCount];
				//if(!item.hidden)
				if(isNodeVisible(item)) {
					list.selectedItem = item;
					list.ensureElementIsVisible(item);
					var curList = getCurrentList();
					curList && curList.focus();
					break;
				}
			}
		}
		function hasOpenedPopup() {
			return Array.some(
				document.getElementsByTagName("menupopup"),
				function(popup) {
					return popup.state == "open";
				}
			);
		}

		//function _log(s) {
		//	Components.classes["@mozilla.org/consoleservice;1"]
		//		.getService(Components.interfaces.nsIConsoleService)
		//		.logStringMessage("[Addons Quick Search] " + s);
		//}
	}, false);
	]]>
	</script>
</overlay>